<?php

namespace App\Customs\Bot;

use App\Models\User;
use App\Models\UserBalance;
use App\Models\Profile;
use App\Models\Bot\UserBot;
use App\Models\Bot\Notice;
use App\Models\Bot\Distribution;
use App\Models\Partner\ClassicPartner;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;
use Carbon\Carbon;
use DateTime;
use Illuminate\Support\Facades\Log;
use Illuminate\Http\Request;

class Club{

    public static function CheckUser($req){

        $chat_id = '';
        if (isset($req["message"])){
            $chat_id = $req["message"]["chat"]["id"];
        }
        if (isset($req["callback_query"])){
            $chat_id = $req["callback_query"]["from"]["id"];
        }

        $user = User::where('id_telegram', $chat_id)->first();
        if(!$user){
            if(isset($req["message"]["from"]["username"])){
                $username = $req["message"]["from"]["username"];
                $usern = User::where('username', $username)->first();
                if($usern){
                    $usern->id_telegram = $chat_id;
                    $usern->save();
                    return $usern;
                }
                
            }
            
            $nastavnik = 3;
            if($chat_id == 555530711){
                $nastavnik = null;
            }
            
            if(mb_strlen($req["message"]["text"]) > 20){
                Log::emergency('—Ä–µ—Ç–µ—Ä–Ω—É–ª–∏');
                return 'spam';
            }
            if(strstr($req["message"]["text"], '/start') && strlen($req["message"]["text"]) > 6){
                
                if(strpos($req["message"]["text"], 'add') !== false){ //–µ—Å–ª–∏ –≤ —Å—Ç–∞—Ä—Ç–µ –±—ã–ª–æ add —Ç–æ –∑–Ω–∞—á–∏—Ç —é–∑–µ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –∫ —Å–µ–±–µ –≤ –ª–∫
                    $userP = User::find(substr($req["message"]["text"], 10));

                    $username = $userP->id;
                    $is_username = 1;
                    if(isset($req["message"]["from"]["username"])){
                        $username = $req["message"]["from"]["username"];
                        $is_username = 0;
                    }
                    $userP->id_telegram = $chat_id;
                    $userP->username = $username;
                    $userP->is_username = $is_username;
                    $userP->save();
                    return ['type' => 1, 'message' => '–ß–∞—Ç –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É'];
                }
                $nastavnik = substr($req["message"]["text"], 7);
                if(!User::find($nastavnik)){
                    $nastavnik = 3;
                }
            }
            $username = null;
            $is_username = 1;
            if(isset($req["message"]["from"]["username"])){
                $username = $req["message"]["from"]["username"];
                $is_username = 0;
            }
            $name = '–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü';
            if(isset($req["message"]["from"]["first_name"])){
                $name = $req["message"]["from"]["first_name"];
            }
            if(isset($req["message"]["from"]["last_name"])){
                $name .= " ".$req["message"]["from"]["last_name"];
            }
            $password = Str::password(8, true, true, false, false);
            $user = User::create([
                'id_telegram' => $chat_id,
                'name' => $name,
                'notice' => 1,
                'username' => $username,
                'password' => Hash::make($password),
                'tokenlogin' => substr(md5($chat_id), 0, 8),
                'temporary_password' => $password,
                'is_username' => $is_username,
                'linkvisit' => $req["message"]["text"],
            ]);
            $usernameinfo = '@'.$username;
            if(!$username){
                $user->username = $user->id;
                $user->save();
                $usernameinfo = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º';
            }
            if($nastavnik == 1){
                $nastavnik = 3;
            }
            $partner = new ClassicPartner();
            $partner->refer_id = $nastavnik;
            $partner->token = substr(md5($user->id), 0, 8);
            $user->partner()->save($partner);
    
            $balance = new UserBalance();
            $user->balance()->save($balance);
    
            $profile = new Profile();
            $profile->avatar = 'https://storage.yandexcloud.net/turbostorage/template/ava.jpg';
            $user->profile()->save($profile);
            
            $stru = $user->breadcrumbspartner();
            $iter = 1;
            foreach($stru as $st){
                if($iter == 1){
                    $st->user->one_line_count += 1;
                    $st->user->all_line_count += 1;
                    $st->user->save();
                }else{
                    $st->user->all_line_count += 1;
                    $st->user->save();
                }
                $iter++;
            }


            Storage::disk('yandexcloud')->makeDirectory($user->id);
            Storage::disk('yandexcloud')->makeDirectory($user->id.'/photo');
            Storage::disk('yandexcloud')->makeDirectory($user->id.'/photo/chek');
            Storage::disk('yandexcloud')->makeDirectory($user->id.'/photo/status');
            Storage::disk('yandexcloud')->makeDirectory($user->id.'/avatar');
            if($chat_id != 555530711){
                Notice::create([
                    'user_id' => $nastavnik,
                    'text' => '–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. '.$usernameinfo.' id '.$user->id,
                    'send' => 0,
                ]);
            }
            
            return ['type' => 'register', 'name'=>$name, 'password'=>$password, 'username'=>$username,];
        }
        if($user->is_username == 1){
            if(isset($req["message"]["from"]["username"])){
                $user->username = $req["message"]["from"]["username"];
                $user->is_username = 0;
                $user->save();
            }
        }else{
            if(isset($req["message"]["from"]["username"])){
                if($user->username != $req["message"]["from"]["username"]){
                    $user->username = $req["message"]["from"]["username"];
                    $user->is_username = 0;
                    $user->save();
                }
            }
        }
        return $user;
    }
    public static function structura($req){
        $user = User::where('id_telegram', $req)->first();
        $mass = '–£—Ä–æ–≤–µ–Ω—å 1 (0 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤):'."
";
        if($user){
            $str = ClassicPartner::where('refer_id', $user->id)->get();
            if($user->partner->nastavnik){
                $nast = $user->partner->nastavnik->username;
                if($user->partner->nastavnik->is_username == 1){
                    $nast = '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Username';
                }
                $mass = "–¢–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @".$nast."
".'–£—Ä–æ–≤–µ–Ω—å 1 ('.$str->count().' —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤):'."
";
            }else{
                $mass = '–£—Ä–æ–≤–µ–Ω—å 1 ('.$str->count().' —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤):'."
";
            }
            $i = 0;
            foreach($str as $item){
                if($item->user->is_username == 0){

                    $mass .= '@'.$item->user->username." id ".$item->user->id."
";
                    $i++;
                    if($i == 50){
                        $mass .= '–ö —Å–æ–∂–µ–ª–µ–Ω–∏—è –≤–∞—à–∞ –ø–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è –±–æ–ª—å—à–µ 50 —á–µ–ª–æ–≤–µ–∫, —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å, –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ';
                        break;
                    }
                }
            }
        }
        return $mass;
    }
    public static function menu($req){
        $countUs = User::count();
        $user = User::where('id_telegram', $req)->first();
        $mass = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        if($user){
            $nast = '–ù–µ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞';
            if($user->partner->nastavnik){
                $nast = $user->partner->nastavnik->username;
                if($user->partner->nastavnik->is_username == 1){
                    $nast = '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Username';
                }
            }
            $status = "Free";
            $active = "–ù–µ –∞–∫—Ç–∏–≤–Ω–∞";
            $promo = "";
            if($user->partnerThree){
                $status = $user->partnerThree->status()['status'];
                if($user->partnerThree->active == 1){
                    $active = "–ê–∫—Ç–∏–≤–Ω–∞";
                }
            }else{
                if($user->id < 8364){
                    $promo = "
–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 500 TR —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
";
                }
            }
$mass = $user->name.", –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é TRClub

ü§ñ –í —Å–∏—Å—Ç–µ–º–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è ".$countUs." –ª—é–¥–µ–π
üìå –í–∞—à ID: ".$user->id."
üòé –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å: @".$nast."
üî∞ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ".$status."
üïì –ü–æ–¥–ø–∏—Å–∫–∞: ".$active."
üí∞ –ë–∞–ª–∞–Ω—Å: ".$user->balance->balance." (P.)
üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ".$user->balance->balance_work." (P.)
".$promo."
–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ—é —Ä–µ—Ñ –≤–æ—Ä–æ–Ω–∫—É 

https://t.me/TRClub_bot?start=".$user->id."

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –ø—Ä–∏–º–µ–Ω—è—Ç—å –≤–æ—Ä–æ–Ω–∫—É, –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —É–∂–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.
‚úÖ –ü—Ä–æ–∫–∞—á–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –æ–Ω–ª–∞–π–Ω.
‚úÖ –ü—Ä–∏–º–µ–Ω—è—è –≤–æ—Ä–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 10–∫–∏ –∏ 100–Ω–∏ —Ç—ã—Å—è—á –µ–∂–µ–º–µ—Å—è—á–Ω–æ, –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ.";

        }
        return $mass;
    }
}